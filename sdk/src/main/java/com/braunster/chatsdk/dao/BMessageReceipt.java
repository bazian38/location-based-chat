package com.braunster.chatsdk.dao;

import com.braunster.chatsdk.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.braunster.chatsdk.dao.entities.BMessageReceiptEntity;
// KEEP INCLUDES END
/**
 * Entity mapped to table BMESSAGE_RECEIPT.
 */
public class BMessageReceipt extends BMessageReceiptEntity  {

    private Long id;
    private Integer readStatus;
    private Long readerId;
    private Long BMessageId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BMessageReceiptDao myDao;

    private BUser reader;
    private Long reader__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BMessageReceipt() {
    }

    public BMessageReceipt(Long id) {
        this.id = id;
    }

    public BMessageReceipt(Long id, Integer readStatus, Long readerId, Long BMessageId) {
        this.id = id;
        this.readStatus = readStatus;
        this.readerId = readerId;
        this.BMessageId = BMessageId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBMessageReceiptDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getReadStatus() {
        return readStatus;
    }

    public void setReadStatus(Integer readStatus) {
        this.readStatus = readStatus;
    }

    public Long getReaderId() {
        return readerId;
    }

    public void setReaderId(Long readerId) {
        this.readerId = readerId;
    }

    public Long getBMessageId() {
        return BMessageId;
    }

    public void setBMessageId(Long BMessageId) {
        this.BMessageId = BMessageId;
    }

    /** To-one relationship, resolved on first access. */
    public BUser getReader() {
        Long __key = this.readerId;
        if (reader__resolvedKey == null || !reader__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BUserDao targetDao = daoSession.getBUserDao();
            BUser readerNew = targetDao.load(__key);
            synchronized (this) {
                reader = readerNew;
            	reader__resolvedKey = __key;
            }
        }
        return reader;
    }

    public void setReader(BUser reader) {
        synchronized (this) {
            this.reader = reader;
            readerId = reader == null ? null : reader.getId();
            reader__resolvedKey = readerId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
